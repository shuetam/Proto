// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IC_ResultFEModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Module.STRENOOX.CalcFEMRoot.ResultFEModel {

  /// <summary>Holder for reflection information generated from IC_ResultFEModel.proto</summary>
  public static partial class ICResultFEModelReflection {

    #region Descriptor
    /// <summary>File descriptor for IC_ResultFEModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ICResultFEModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZJQ19SZXN1bHRGRU1vZGVsLnByb3RvEgVpY0ZFTSJkChhJQ19SZXN1bHRG",
            "RU5vZGVEZXNjUHJvdG8SCgoCSWQYASABKAUSDAoEVHlwZRgCIAEoBRIOCgZD",
            "b29yZFgYAyABKAESDgoGQ29vcmRZGAQgASgBEg4KBkNvb3JkWhgFIAEoASKh",
            "AgoXSUNfUmVzdWx0RkVFbGVtZW50UHJvdG8SCgoCSWQYASABKAUSDAoEVHlw",
            "ZRgCIAEoBRIOCgZMZW5ndGgYAyABKAESDQoFTm9kZXMYBCADKAUSDwoHQmFz",
            "ZTFfWBgFIAEoARIPCgdCYXNlMV9ZGAYgASgBEg8KB0Jhc2UxX1oYByABKAES",
            "DwoHQmFzZTJfWBgIIAEoARIPCgdCYXNlMl9ZGAkgASgBEg8KB0Jhc2UyX1oY",
            "CiABKAESDwoHQmFzZTNfWBgLIAEoARIPCgdCYXNlM19ZGAwgASgBEg8KB0Jh",
            "c2UzX1oYDSABKAESEAoIT3JpZ2luX1gYDiABKAESEAoIT3JpZ2luX1kYDyAB",
            "KAESEAoIT3JpZ2luX1oYECABKAEinwIKE0lDX1Jlc3VsdEZFQmFyUHJvdG8S",
            "CgoCSWQYASABKAUSFgoOTWFjcm9FbGVtZW50SWQYAiABKAUSEQoJRGlzdGFu",
            "Y2UxGAMgASgBEhEKCURpc3RhbmNlMhgEIAEoARIVCg1GWFBvbHlub21pbmFs",
            "GAUgAygBEhUKDU1YUG9seW5vbWluYWwYBiADKAESFQoNVVhQb2x5bm9taW5h",
            "bBgHIAMoARIVCg1SWFBvbHlub21pbmFsGAggAygBEhcKD0ZZTVpQb2x5bm9t",
            "aW5hbBgJIAMoARIXCg9VWVJaUG9seW5vbWluYWwYCiADKAESFwoPRlpNWVBv",
            "bHlub21pbmFsGAsgAygBEhcKD1VaUllQb2x5bm9taW5hbBgMIAMoASIwChRJ",
            "Q19SZXN1bHRGRU5vZGVQcm90bxIKCgJJZBgBIAEoBRIMCgREYXRhGAIgAygB",
            "IjMKF0lDX1Jlc3VsdEZFU3VwcG9ydFByb3RvEgoKAklkGAEgASgFEgwKBERh",
            "dGEYAiADKAEihwEKFUlDX1Jlc3VsdEZFU29saWRQcm90bxIKCgJJZBgBIAEo",
            "BRIMCgRUeXBlGAIgASgFEhYKDk1hY3JvRWxlbWVudElkGAMgASgFEg4KBkNv",
            "b3JkWBgEIAEoARIOCgZDb29yZFkYBSABKAESDgoGQ29vcmRaGAYgASgBEgwK",
            "BERhdGEYByADKAEieQoVSUNfUmVzdWx0RkVQYW5lbFByb3RvEgoKAklkGAEg",
            "ASgFEhYKDk1hY3JvRWxlbWVudElkGAIgASgFEg4KBkNvb3JkWBgDIAEoARIO",
            "CgZDb29yZFkYBCABKAESDgoGQ29vcmRaGAUgASgBEgwKBERhdGEYBiADKAEi",
            "LwoTSUNfUmVzdWx0RkVEU0NQcm90bxIKCgJJZBgBIAEoBRIMCgREYXRhGAIg",
            "AygBIuoCChRJQ19SZXN1bHRGRUNhc2VQcm90bxIOCgZDYXNlSWQYASABKAUS",
            "EAoIVGltZVN0ZXAYAiABKAESLgoKUmVzdWx0QmFycxgDIAMoCzIaLmljRkVN",
            "LklDX1Jlc3VsdEZFQmFyUHJvdG8SMAoLUmVzdWx0Tm9kZXMYBCADKAsyGy5p",
            "Y0ZFTS5JQ19SZXN1bHRGRU5vZGVQcm90bxIyCgxSZXN1bHRTb2xpZHMYBSAD",
            "KAsyHC5pY0ZFTS5JQ19SZXN1bHRGRVNvbGlkUHJvdG8SNgoOUmVzdWx0U3Vw",
            "cG9ydHMYBiADKAsyHi5pY0ZFTS5JQ19SZXN1bHRGRVN1cHBvcnRQcm90bxIy",
            "CgxSZXN1bHRQYW5lbHMYByADKAsyHC5pY0ZFTS5JQ19SZXN1bHRGRVBhbmVs",
            "UHJvdG8SLgoKUmVzdWx0RFNDcxgIIAMoCzIaLmljRkVNLklDX1Jlc3VsdEZF",
            "RFNDUHJvdG8i2wEKEElDX1Jlc3VsdEZFUHJvdG8SEAoITm9kZVNpemUYASAB",
            "KAUSEAoIU3VwcFNpemUYAiABKAUSDwoHQmFyU2l6ZRgDIAEoBRIRCglQYW5l",
            "bFNpemUYBCABKAUSEQoJU29saWRTaXplGAUgASgFEjYKDlJlc3VsdEVsZW1l",
            "bnRzGAYgAygLMh4uaWNGRU0uSUNfUmVzdWx0RkVFbGVtZW50UHJvdG8SNAoL",
            "UmVzdWx0Tm9kZXMYByADKAsyHy5pY0ZFTS5JQ19SZXN1bHRGRU5vZGVEZXNj",
            "UHJvdG8ieAoXSUNfUmVzdWx0RkVVdGlsaXR5UHJvdG8SKwoKUmVzdWx0SW5m",
            "bxgBIAEoCzIXLmljRkVNLklDX1Jlc3VsdEZFUHJvdG8SMAoLUmVzdWx0Q2Fz",
            "ZXMYAiADKAsyGy5pY0ZFTS5JQ19SZXN1bHRGRUNhc2VQcm90b0Iv+AEBqgIp",
            "TW9kdWxlLlNUUkVOT09YLkNhbGNGRU1Sb290LlJlc3VsdEZFTW9kZWxiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFENodeDescProto), global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFENodeDescProto.Parser, new[]{ "Id", "Type", "CoordX", "CoordY", "CoordZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEElementProto), global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEElementProto.Parser, new[]{ "Id", "Type", "Length", "Nodes", "Base1X", "Base1Y", "Base1Z", "Base2X", "Base2Y", "Base2Z", "Base3X", "Base3Y", "Base3Z", "OriginX", "OriginY", "OriginZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEBarProto), global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEBarProto.Parser, new[]{ "Id", "MacroElementId", "Distance1", "Distance2", "FXPolynominal", "MXPolynominal", "UXPolynominal", "RXPolynominal", "FYMZPolynominal", "UYRZPolynominal", "FZMYPolynominal", "UZRYPolynominal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFENodeProto), global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFENodeProto.Parser, new[]{ "Id", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFESupportProto), global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFESupportProto.Parser, new[]{ "Id", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFESolidProto), global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFESolidProto.Parser, new[]{ "Id", "Type", "MacroElementId", "CoordX", "CoordY", "CoordZ", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEPanelProto), global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEPanelProto.Parser, new[]{ "Id", "MacroElementId", "CoordX", "CoordY", "CoordZ", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEDSCProto), global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEDSCProto.Parser, new[]{ "Id", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFECaseProto), global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFECaseProto.Parser, new[]{ "CaseId", "TimeStep", "ResultBars", "ResultNodes", "ResultSolids", "ResultSupports", "ResultPanels", "ResultDSCs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEProto), global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEProto.Parser, new[]{ "NodeSize", "SuppSize", "BarSize", "PanelSize", "SolidSize", "ResultElements", "ResultNodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEUtilityProto), global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEUtilityProto.Parser, new[]{ "ResultInfo", "ResultCases" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class IC_ResultFENodeDescProto : pb::IMessage<IC_ResultFENodeDescProto> {
    private static readonly pb::MessageParser<IC_ResultFENodeDescProto> _parser = new pb::MessageParser<IC_ResultFENodeDescProto>(() => new IC_ResultFENodeDescProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IC_ResultFENodeDescProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.ICResultFEModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFENodeDescProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFENodeDescProto(IC_ResultFENodeDescProto other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      coordX_ = other.coordX_;
      coordY_ = other.coordY_;
      coordZ_ = other.coordZ_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFENodeDescProto Clone() {
      return new IC_ResultFENodeDescProto(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "CoordX" field.</summary>
    public const int CoordXFieldNumber = 3;
    private double coordX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CoordX {
      get { return coordX_; }
      set {
        coordX_ = value;
      }
    }

    /// <summary>Field number for the "CoordY" field.</summary>
    public const int CoordYFieldNumber = 4;
    private double coordY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CoordY {
      get { return coordY_; }
      set {
        coordY_ = value;
      }
    }

    /// <summary>Field number for the "CoordZ" field.</summary>
    public const int CoordZFieldNumber = 5;
    private double coordZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CoordZ {
      get { return coordZ_; }
      set {
        coordZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IC_ResultFENodeDescProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IC_ResultFENodeDescProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (CoordX != other.CoordX) return false;
      if (CoordY != other.CoordY) return false;
      if (CoordZ != other.CoordZ) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CoordX != 0D) hash ^= CoordX.GetHashCode();
      if (CoordY != 0D) hash ^= CoordY.GetHashCode();
      if (CoordZ != 0D) hash ^= CoordZ.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (CoordX != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CoordX);
      }
      if (CoordY != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(CoordY);
      }
      if (CoordZ != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CoordZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (CoordX != 0D) {
        size += 1 + 8;
      }
      if (CoordY != 0D) {
        size += 1 + 8;
      }
      if (CoordZ != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IC_ResultFENodeDescProto other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CoordX != 0D) {
        CoordX = other.CoordX;
      }
      if (other.CoordY != 0D) {
        CoordY = other.CoordY;
      }
      if (other.CoordZ != 0D) {
        CoordZ = other.CoordZ;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 25: {
            CoordX = input.ReadDouble();
            break;
          }
          case 33: {
            CoordY = input.ReadDouble();
            break;
          }
          case 41: {
            CoordZ = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IC_ResultFEElementProto : pb::IMessage<IC_ResultFEElementProto> {
    private static readonly pb::MessageParser<IC_ResultFEElementProto> _parser = new pb::MessageParser<IC_ResultFEElementProto>(() => new IC_ResultFEElementProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IC_ResultFEElementProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.ICResultFEModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEElementProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEElementProto(IC_ResultFEElementProto other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      length_ = other.length_;
      nodes_ = other.nodes_.Clone();
      base1X_ = other.base1X_;
      base1Y_ = other.base1Y_;
      base1Z_ = other.base1Z_;
      base2X_ = other.base2X_;
      base2Y_ = other.base2Y_;
      base2Z_ = other.base2Z_;
      base3X_ = other.base3X_;
      base3Y_ = other.base3Y_;
      base3Z_ = other.base3Z_;
      originX_ = other.originX_;
      originY_ = other.originY_;
      originZ_ = other.originZ_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEElementProto Clone() {
      return new IC_ResultFEElementProto(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Length" field.</summary>
    public const int LengthFieldNumber = 3;
    private double length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "Nodes" field.</summary>
    public const int NodesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_nodes_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> nodes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "Base1_X" field.</summary>
    public const int Base1XFieldNumber = 5;
    private double base1X_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Base1X {
      get { return base1X_; }
      set {
        base1X_ = value;
      }
    }

    /// <summary>Field number for the "Base1_Y" field.</summary>
    public const int Base1YFieldNumber = 6;
    private double base1Y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Base1Y {
      get { return base1Y_; }
      set {
        base1Y_ = value;
      }
    }

    /// <summary>Field number for the "Base1_Z" field.</summary>
    public const int Base1ZFieldNumber = 7;
    private double base1Z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Base1Z {
      get { return base1Z_; }
      set {
        base1Z_ = value;
      }
    }

    /// <summary>Field number for the "Base2_X" field.</summary>
    public const int Base2XFieldNumber = 8;
    private double base2X_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Base2X {
      get { return base2X_; }
      set {
        base2X_ = value;
      }
    }

    /// <summary>Field number for the "Base2_Y" field.</summary>
    public const int Base2YFieldNumber = 9;
    private double base2Y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Base2Y {
      get { return base2Y_; }
      set {
        base2Y_ = value;
      }
    }

    /// <summary>Field number for the "Base2_Z" field.</summary>
    public const int Base2ZFieldNumber = 10;
    private double base2Z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Base2Z {
      get { return base2Z_; }
      set {
        base2Z_ = value;
      }
    }

    /// <summary>Field number for the "Base3_X" field.</summary>
    public const int Base3XFieldNumber = 11;
    private double base3X_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Base3X {
      get { return base3X_; }
      set {
        base3X_ = value;
      }
    }

    /// <summary>Field number for the "Base3_Y" field.</summary>
    public const int Base3YFieldNumber = 12;
    private double base3Y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Base3Y {
      get { return base3Y_; }
      set {
        base3Y_ = value;
      }
    }

    /// <summary>Field number for the "Base3_Z" field.</summary>
    public const int Base3ZFieldNumber = 13;
    private double base3Z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Base3Z {
      get { return base3Z_; }
      set {
        base3Z_ = value;
      }
    }

    /// <summary>Field number for the "Origin_X" field.</summary>
    public const int OriginXFieldNumber = 14;
    private double originX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OriginX {
      get { return originX_; }
      set {
        originX_ = value;
      }
    }

    /// <summary>Field number for the "Origin_Y" field.</summary>
    public const int OriginYFieldNumber = 15;
    private double originY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OriginY {
      get { return originY_; }
      set {
        originY_ = value;
      }
    }

    /// <summary>Field number for the "Origin_Z" field.</summary>
    public const int OriginZFieldNumber = 16;
    private double originZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OriginZ {
      get { return originZ_; }
      set {
        originZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IC_ResultFEElementProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IC_ResultFEElementProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Length != other.Length) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      if (Base1X != other.Base1X) return false;
      if (Base1Y != other.Base1Y) return false;
      if (Base1Z != other.Base1Z) return false;
      if (Base2X != other.Base2X) return false;
      if (Base2Y != other.Base2Y) return false;
      if (Base2Z != other.Base2Z) return false;
      if (Base3X != other.Base3X) return false;
      if (Base3Y != other.Base3Y) return false;
      if (Base3Z != other.Base3Z) return false;
      if (OriginX != other.OriginX) return false;
      if (OriginY != other.OriginY) return false;
      if (OriginZ != other.OriginZ) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Length != 0D) hash ^= Length.GetHashCode();
      hash ^= nodes_.GetHashCode();
      if (Base1X != 0D) hash ^= Base1X.GetHashCode();
      if (Base1Y != 0D) hash ^= Base1Y.GetHashCode();
      if (Base1Z != 0D) hash ^= Base1Z.GetHashCode();
      if (Base2X != 0D) hash ^= Base2X.GetHashCode();
      if (Base2Y != 0D) hash ^= Base2Y.GetHashCode();
      if (Base2Z != 0D) hash ^= Base2Z.GetHashCode();
      if (Base3X != 0D) hash ^= Base3X.GetHashCode();
      if (Base3Y != 0D) hash ^= Base3Y.GetHashCode();
      if (Base3Z != 0D) hash ^= Base3Z.GetHashCode();
      if (OriginX != 0D) hash ^= OriginX.GetHashCode();
      if (OriginY != 0D) hash ^= OriginY.GetHashCode();
      if (OriginZ != 0D) hash ^= OriginZ.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Length != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Length);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
      if (Base1X != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Base1X);
      }
      if (Base1Y != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Base1Y);
      }
      if (Base1Z != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Base1Z);
      }
      if (Base2X != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Base2X);
      }
      if (Base2Y != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Base2Y);
      }
      if (Base2Z != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Base2Z);
      }
      if (Base3X != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Base3X);
      }
      if (Base3Y != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Base3Y);
      }
      if (Base3Z != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Base3Z);
      }
      if (OriginX != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(OriginX);
      }
      if (OriginY != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(OriginY);
      }
      if (OriginZ != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(OriginZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Length != 0D) {
        size += 1 + 8;
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      if (Base1X != 0D) {
        size += 1 + 8;
      }
      if (Base1Y != 0D) {
        size += 1 + 8;
      }
      if (Base1Z != 0D) {
        size += 1 + 8;
      }
      if (Base2X != 0D) {
        size += 1 + 8;
      }
      if (Base2Y != 0D) {
        size += 1 + 8;
      }
      if (Base2Z != 0D) {
        size += 1 + 8;
      }
      if (Base3X != 0D) {
        size += 1 + 8;
      }
      if (Base3Y != 0D) {
        size += 1 + 8;
      }
      if (Base3Z != 0D) {
        size += 1 + 8;
      }
      if (OriginX != 0D) {
        size += 1 + 8;
      }
      if (OriginY != 0D) {
        size += 1 + 8;
      }
      if (OriginZ != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IC_ResultFEElementProto other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Length != 0D) {
        Length = other.Length;
      }
      nodes_.Add(other.nodes_);
      if (other.Base1X != 0D) {
        Base1X = other.Base1X;
      }
      if (other.Base1Y != 0D) {
        Base1Y = other.Base1Y;
      }
      if (other.Base1Z != 0D) {
        Base1Z = other.Base1Z;
      }
      if (other.Base2X != 0D) {
        Base2X = other.Base2X;
      }
      if (other.Base2Y != 0D) {
        Base2Y = other.Base2Y;
      }
      if (other.Base2Z != 0D) {
        Base2Z = other.Base2Z;
      }
      if (other.Base3X != 0D) {
        Base3X = other.Base3X;
      }
      if (other.Base3Y != 0D) {
        Base3Y = other.Base3Y;
      }
      if (other.Base3Z != 0D) {
        Base3Z = other.Base3Z;
      }
      if (other.OriginX != 0D) {
        OriginX = other.OriginX;
      }
      if (other.OriginY != 0D) {
        OriginY = other.OriginY;
      }
      if (other.OriginZ != 0D) {
        OriginZ = other.OriginZ;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 25: {
            Length = input.ReadDouble();
            break;
          }
          case 34:
          case 32: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 41: {
            Base1X = input.ReadDouble();
            break;
          }
          case 49: {
            Base1Y = input.ReadDouble();
            break;
          }
          case 57: {
            Base1Z = input.ReadDouble();
            break;
          }
          case 65: {
            Base2X = input.ReadDouble();
            break;
          }
          case 73: {
            Base2Y = input.ReadDouble();
            break;
          }
          case 81: {
            Base2Z = input.ReadDouble();
            break;
          }
          case 89: {
            Base3X = input.ReadDouble();
            break;
          }
          case 97: {
            Base3Y = input.ReadDouble();
            break;
          }
          case 105: {
            Base3Z = input.ReadDouble();
            break;
          }
          case 113: {
            OriginX = input.ReadDouble();
            break;
          }
          case 121: {
            OriginY = input.ReadDouble();
            break;
          }
          case 129: {
            OriginZ = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IC_ResultFEBarProto : pb::IMessage<IC_ResultFEBarProto> {
    private static readonly pb::MessageParser<IC_ResultFEBarProto> _parser = new pb::MessageParser<IC_ResultFEBarProto>(() => new IC_ResultFEBarProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IC_ResultFEBarProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.ICResultFEModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEBarProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEBarProto(IC_ResultFEBarProto other) : this() {
      id_ = other.id_;
      macroElementId_ = other.macroElementId_;
      distance1_ = other.distance1_;
      distance2_ = other.distance2_;
      fXPolynominal_ = other.fXPolynominal_.Clone();
      mXPolynominal_ = other.mXPolynominal_.Clone();
      uXPolynominal_ = other.uXPolynominal_.Clone();
      rXPolynominal_ = other.rXPolynominal_.Clone();
      fYMZPolynominal_ = other.fYMZPolynominal_.Clone();
      uYRZPolynominal_ = other.uYRZPolynominal_.Clone();
      fZMYPolynominal_ = other.fZMYPolynominal_.Clone();
      uZRYPolynominal_ = other.uZRYPolynominal_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEBarProto Clone() {
      return new IC_ResultFEBarProto(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "MacroElementId" field.</summary>
    public const int MacroElementIdFieldNumber = 2;
    private int macroElementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MacroElementId {
      get { return macroElementId_; }
      set {
        macroElementId_ = value;
      }
    }

    /// <summary>Field number for the "Distance1" field.</summary>
    public const int Distance1FieldNumber = 3;
    private double distance1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Distance1 {
      get { return distance1_; }
      set {
        distance1_ = value;
      }
    }

    /// <summary>Field number for the "Distance2" field.</summary>
    public const int Distance2FieldNumber = 4;
    private double distance2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Distance2 {
      get { return distance2_; }
      set {
        distance2_ = value;
      }
    }

    /// <summary>Field number for the "FXPolynominal" field.</summary>
    public const int FXPolynominalFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_fXPolynominal_codec
        = pb::FieldCodec.ForDouble(42);
    private readonly pbc::RepeatedField<double> fXPolynominal_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> FXPolynominal {
      get { return fXPolynominal_; }
    }

    /// <summary>Field number for the "MXPolynominal" field.</summary>
    public const int MXPolynominalFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_mXPolynominal_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> mXPolynominal_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> MXPolynominal {
      get { return mXPolynominal_; }
    }

    /// <summary>Field number for the "UXPolynominal" field.</summary>
    public const int UXPolynominalFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_uXPolynominal_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> uXPolynominal_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> UXPolynominal {
      get { return uXPolynominal_; }
    }

    /// <summary>Field number for the "RXPolynominal" field.</summary>
    public const int RXPolynominalFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_rXPolynominal_codec
        = pb::FieldCodec.ForDouble(66);
    private readonly pbc::RepeatedField<double> rXPolynominal_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> RXPolynominal {
      get { return rXPolynominal_; }
    }

    /// <summary>Field number for the "FYMZPolynominal" field.</summary>
    public const int FYMZPolynominalFieldNumber = 9;
    private static readonly pb::FieldCodec<double> _repeated_fYMZPolynominal_codec
        = pb::FieldCodec.ForDouble(74);
    private readonly pbc::RepeatedField<double> fYMZPolynominal_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> FYMZPolynominal {
      get { return fYMZPolynominal_; }
    }

    /// <summary>Field number for the "UYRZPolynominal" field.</summary>
    public const int UYRZPolynominalFieldNumber = 10;
    private static readonly pb::FieldCodec<double> _repeated_uYRZPolynominal_codec
        = pb::FieldCodec.ForDouble(82);
    private readonly pbc::RepeatedField<double> uYRZPolynominal_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> UYRZPolynominal {
      get { return uYRZPolynominal_; }
    }

    /// <summary>Field number for the "FZMYPolynominal" field.</summary>
    public const int FZMYPolynominalFieldNumber = 11;
    private static readonly pb::FieldCodec<double> _repeated_fZMYPolynominal_codec
        = pb::FieldCodec.ForDouble(90);
    private readonly pbc::RepeatedField<double> fZMYPolynominal_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> FZMYPolynominal {
      get { return fZMYPolynominal_; }
    }

    /// <summary>Field number for the "UZRYPolynominal" field.</summary>
    public const int UZRYPolynominalFieldNumber = 12;
    private static readonly pb::FieldCodec<double> _repeated_uZRYPolynominal_codec
        = pb::FieldCodec.ForDouble(98);
    private readonly pbc::RepeatedField<double> uZRYPolynominal_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> UZRYPolynominal {
      get { return uZRYPolynominal_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IC_ResultFEBarProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IC_ResultFEBarProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MacroElementId != other.MacroElementId) return false;
      if (Distance1 != other.Distance1) return false;
      if (Distance2 != other.Distance2) return false;
      if(!fXPolynominal_.Equals(other.fXPolynominal_)) return false;
      if(!mXPolynominal_.Equals(other.mXPolynominal_)) return false;
      if(!uXPolynominal_.Equals(other.uXPolynominal_)) return false;
      if(!rXPolynominal_.Equals(other.rXPolynominal_)) return false;
      if(!fYMZPolynominal_.Equals(other.fYMZPolynominal_)) return false;
      if(!uYRZPolynominal_.Equals(other.uYRZPolynominal_)) return false;
      if(!fZMYPolynominal_.Equals(other.fZMYPolynominal_)) return false;
      if(!uZRYPolynominal_.Equals(other.uZRYPolynominal_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MacroElementId != 0) hash ^= MacroElementId.GetHashCode();
      if (Distance1 != 0D) hash ^= Distance1.GetHashCode();
      if (Distance2 != 0D) hash ^= Distance2.GetHashCode();
      hash ^= fXPolynominal_.GetHashCode();
      hash ^= mXPolynominal_.GetHashCode();
      hash ^= uXPolynominal_.GetHashCode();
      hash ^= rXPolynominal_.GetHashCode();
      hash ^= fYMZPolynominal_.GetHashCode();
      hash ^= uYRZPolynominal_.GetHashCode();
      hash ^= fZMYPolynominal_.GetHashCode();
      hash ^= uZRYPolynominal_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (MacroElementId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MacroElementId);
      }
      if (Distance1 != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Distance1);
      }
      if (Distance2 != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Distance2);
      }
      fXPolynominal_.WriteTo(output, _repeated_fXPolynominal_codec);
      mXPolynominal_.WriteTo(output, _repeated_mXPolynominal_codec);
      uXPolynominal_.WriteTo(output, _repeated_uXPolynominal_codec);
      rXPolynominal_.WriteTo(output, _repeated_rXPolynominal_codec);
      fYMZPolynominal_.WriteTo(output, _repeated_fYMZPolynominal_codec);
      uYRZPolynominal_.WriteTo(output, _repeated_uYRZPolynominal_codec);
      fZMYPolynominal_.WriteTo(output, _repeated_fZMYPolynominal_codec);
      uZRYPolynominal_.WriteTo(output, _repeated_uZRYPolynominal_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (MacroElementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MacroElementId);
      }
      if (Distance1 != 0D) {
        size += 1 + 8;
      }
      if (Distance2 != 0D) {
        size += 1 + 8;
      }
      size += fXPolynominal_.CalculateSize(_repeated_fXPolynominal_codec);
      size += mXPolynominal_.CalculateSize(_repeated_mXPolynominal_codec);
      size += uXPolynominal_.CalculateSize(_repeated_uXPolynominal_codec);
      size += rXPolynominal_.CalculateSize(_repeated_rXPolynominal_codec);
      size += fYMZPolynominal_.CalculateSize(_repeated_fYMZPolynominal_codec);
      size += uYRZPolynominal_.CalculateSize(_repeated_uYRZPolynominal_codec);
      size += fZMYPolynominal_.CalculateSize(_repeated_fZMYPolynominal_codec);
      size += uZRYPolynominal_.CalculateSize(_repeated_uZRYPolynominal_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IC_ResultFEBarProto other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MacroElementId != 0) {
        MacroElementId = other.MacroElementId;
      }
      if (other.Distance1 != 0D) {
        Distance1 = other.Distance1;
      }
      if (other.Distance2 != 0D) {
        Distance2 = other.Distance2;
      }
      fXPolynominal_.Add(other.fXPolynominal_);
      mXPolynominal_.Add(other.mXPolynominal_);
      uXPolynominal_.Add(other.uXPolynominal_);
      rXPolynominal_.Add(other.rXPolynominal_);
      fYMZPolynominal_.Add(other.fYMZPolynominal_);
      uYRZPolynominal_.Add(other.uYRZPolynominal_);
      fZMYPolynominal_.Add(other.fZMYPolynominal_);
      uZRYPolynominal_.Add(other.uZRYPolynominal_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            MacroElementId = input.ReadInt32();
            break;
          }
          case 25: {
            Distance1 = input.ReadDouble();
            break;
          }
          case 33: {
            Distance2 = input.ReadDouble();
            break;
          }
          case 42:
          case 41: {
            fXPolynominal_.AddEntriesFrom(input, _repeated_fXPolynominal_codec);
            break;
          }
          case 50:
          case 49: {
            mXPolynominal_.AddEntriesFrom(input, _repeated_mXPolynominal_codec);
            break;
          }
          case 58:
          case 57: {
            uXPolynominal_.AddEntriesFrom(input, _repeated_uXPolynominal_codec);
            break;
          }
          case 66:
          case 65: {
            rXPolynominal_.AddEntriesFrom(input, _repeated_rXPolynominal_codec);
            break;
          }
          case 74:
          case 73: {
            fYMZPolynominal_.AddEntriesFrom(input, _repeated_fYMZPolynominal_codec);
            break;
          }
          case 82:
          case 81: {
            uYRZPolynominal_.AddEntriesFrom(input, _repeated_uYRZPolynominal_codec);
            break;
          }
          case 90:
          case 89: {
            fZMYPolynominal_.AddEntriesFrom(input, _repeated_fZMYPolynominal_codec);
            break;
          }
          case 98:
          case 97: {
            uZRYPolynominal_.AddEntriesFrom(input, _repeated_uZRYPolynominal_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IC_ResultFENodeProto : pb::IMessage<IC_ResultFENodeProto> {
    private static readonly pb::MessageParser<IC_ResultFENodeProto> _parser = new pb::MessageParser<IC_ResultFENodeProto>(() => new IC_ResultFENodeProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IC_ResultFENodeProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.ICResultFEModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFENodeProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFENodeProto(IC_ResultFENodeProto other) : this() {
      id_ = other.id_;
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFENodeProto Clone() {
      return new IC_ResultFENodeProto(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_data_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> data_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IC_ResultFENodeProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IC_ResultFENodeProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IC_ResultFENodeProto other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 17: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IC_ResultFESupportProto : pb::IMessage<IC_ResultFESupportProto> {
    private static readonly pb::MessageParser<IC_ResultFESupportProto> _parser = new pb::MessageParser<IC_ResultFESupportProto>(() => new IC_ResultFESupportProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IC_ResultFESupportProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.ICResultFEModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFESupportProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFESupportProto(IC_ResultFESupportProto other) : this() {
      id_ = other.id_;
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFESupportProto Clone() {
      return new IC_ResultFESupportProto(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_data_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> data_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IC_ResultFESupportProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IC_ResultFESupportProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IC_ResultFESupportProto other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 17: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IC_ResultFESolidProto : pb::IMessage<IC_ResultFESolidProto> {
    private static readonly pb::MessageParser<IC_ResultFESolidProto> _parser = new pb::MessageParser<IC_ResultFESolidProto>(() => new IC_ResultFESolidProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IC_ResultFESolidProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.ICResultFEModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFESolidProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFESolidProto(IC_ResultFESolidProto other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      macroElementId_ = other.macroElementId_;
      coordX_ = other.coordX_;
      coordY_ = other.coordY_;
      coordZ_ = other.coordZ_;
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFESolidProto Clone() {
      return new IC_ResultFESolidProto(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "MacroElementId" field.</summary>
    public const int MacroElementIdFieldNumber = 3;
    private int macroElementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MacroElementId {
      get { return macroElementId_; }
      set {
        macroElementId_ = value;
      }
    }

    /// <summary>Field number for the "CoordX" field.</summary>
    public const int CoordXFieldNumber = 4;
    private double coordX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CoordX {
      get { return coordX_; }
      set {
        coordX_ = value;
      }
    }

    /// <summary>Field number for the "CoordY" field.</summary>
    public const int CoordYFieldNumber = 5;
    private double coordY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CoordY {
      get { return coordY_; }
      set {
        coordY_ = value;
      }
    }

    /// <summary>Field number for the "CoordZ" field.</summary>
    public const int CoordZFieldNumber = 6;
    private double coordZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CoordZ {
      get { return coordZ_; }
      set {
        coordZ_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_data_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> data_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IC_ResultFESolidProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IC_ResultFESolidProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (MacroElementId != other.MacroElementId) return false;
      if (CoordX != other.CoordX) return false;
      if (CoordY != other.CoordY) return false;
      if (CoordZ != other.CoordZ) return false;
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (MacroElementId != 0) hash ^= MacroElementId.GetHashCode();
      if (CoordX != 0D) hash ^= CoordX.GetHashCode();
      if (CoordY != 0D) hash ^= CoordY.GetHashCode();
      if (CoordZ != 0D) hash ^= CoordZ.GetHashCode();
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (MacroElementId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MacroElementId);
      }
      if (CoordX != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(CoordX);
      }
      if (CoordY != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CoordY);
      }
      if (CoordZ != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CoordZ);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (MacroElementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MacroElementId);
      }
      if (CoordX != 0D) {
        size += 1 + 8;
      }
      if (CoordY != 0D) {
        size += 1 + 8;
      }
      if (CoordZ != 0D) {
        size += 1 + 8;
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IC_ResultFESolidProto other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.MacroElementId != 0) {
        MacroElementId = other.MacroElementId;
      }
      if (other.CoordX != 0D) {
        CoordX = other.CoordX;
      }
      if (other.CoordY != 0D) {
        CoordY = other.CoordY;
      }
      if (other.CoordZ != 0D) {
        CoordZ = other.CoordZ;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            MacroElementId = input.ReadInt32();
            break;
          }
          case 33: {
            CoordX = input.ReadDouble();
            break;
          }
          case 41: {
            CoordY = input.ReadDouble();
            break;
          }
          case 49: {
            CoordZ = input.ReadDouble();
            break;
          }
          case 58:
          case 57: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IC_ResultFEPanelProto : pb::IMessage<IC_ResultFEPanelProto> {
    private static readonly pb::MessageParser<IC_ResultFEPanelProto> _parser = new pb::MessageParser<IC_ResultFEPanelProto>(() => new IC_ResultFEPanelProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IC_ResultFEPanelProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.ICResultFEModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEPanelProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEPanelProto(IC_ResultFEPanelProto other) : this() {
      id_ = other.id_;
      macroElementId_ = other.macroElementId_;
      coordX_ = other.coordX_;
      coordY_ = other.coordY_;
      coordZ_ = other.coordZ_;
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEPanelProto Clone() {
      return new IC_ResultFEPanelProto(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "MacroElementId" field.</summary>
    public const int MacroElementIdFieldNumber = 2;
    private int macroElementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MacroElementId {
      get { return macroElementId_; }
      set {
        macroElementId_ = value;
      }
    }

    /// <summary>Field number for the "CoordX" field.</summary>
    public const int CoordXFieldNumber = 3;
    private double coordX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CoordX {
      get { return coordX_; }
      set {
        coordX_ = value;
      }
    }

    /// <summary>Field number for the "CoordY" field.</summary>
    public const int CoordYFieldNumber = 4;
    private double coordY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CoordY {
      get { return coordY_; }
      set {
        coordY_ = value;
      }
    }

    /// <summary>Field number for the "CoordZ" field.</summary>
    public const int CoordZFieldNumber = 5;
    private double coordZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CoordZ {
      get { return coordZ_; }
      set {
        coordZ_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_data_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> data_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IC_ResultFEPanelProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IC_ResultFEPanelProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MacroElementId != other.MacroElementId) return false;
      if (CoordX != other.CoordX) return false;
      if (CoordY != other.CoordY) return false;
      if (CoordZ != other.CoordZ) return false;
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MacroElementId != 0) hash ^= MacroElementId.GetHashCode();
      if (CoordX != 0D) hash ^= CoordX.GetHashCode();
      if (CoordY != 0D) hash ^= CoordY.GetHashCode();
      if (CoordZ != 0D) hash ^= CoordZ.GetHashCode();
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (MacroElementId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MacroElementId);
      }
      if (CoordX != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CoordX);
      }
      if (CoordY != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(CoordY);
      }
      if (CoordZ != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CoordZ);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (MacroElementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MacroElementId);
      }
      if (CoordX != 0D) {
        size += 1 + 8;
      }
      if (CoordY != 0D) {
        size += 1 + 8;
      }
      if (CoordZ != 0D) {
        size += 1 + 8;
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IC_ResultFEPanelProto other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MacroElementId != 0) {
        MacroElementId = other.MacroElementId;
      }
      if (other.CoordX != 0D) {
        CoordX = other.CoordX;
      }
      if (other.CoordY != 0D) {
        CoordY = other.CoordY;
      }
      if (other.CoordZ != 0D) {
        CoordZ = other.CoordZ;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            MacroElementId = input.ReadInt32();
            break;
          }
          case 25: {
            CoordX = input.ReadDouble();
            break;
          }
          case 33: {
            CoordY = input.ReadDouble();
            break;
          }
          case 41: {
            CoordZ = input.ReadDouble();
            break;
          }
          case 50:
          case 49: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IC_ResultFEDSCProto : pb::IMessage<IC_ResultFEDSCProto> {
    private static readonly pb::MessageParser<IC_ResultFEDSCProto> _parser = new pb::MessageParser<IC_ResultFEDSCProto>(() => new IC_ResultFEDSCProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IC_ResultFEDSCProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.ICResultFEModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEDSCProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEDSCProto(IC_ResultFEDSCProto other) : this() {
      id_ = other.id_;
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEDSCProto Clone() {
      return new IC_ResultFEDSCProto(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_data_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> data_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IC_ResultFEDSCProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IC_ResultFEDSCProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IC_ResultFEDSCProto other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 17: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IC_ResultFECaseProto : pb::IMessage<IC_ResultFECaseProto> {
    private static readonly pb::MessageParser<IC_ResultFECaseProto> _parser = new pb::MessageParser<IC_ResultFECaseProto>(() => new IC_ResultFECaseProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IC_ResultFECaseProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.ICResultFEModelReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFECaseProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFECaseProto(IC_ResultFECaseProto other) : this() {
      caseId_ = other.caseId_;
      timeStep_ = other.timeStep_;
      resultBars_ = other.resultBars_.Clone();
      resultNodes_ = other.resultNodes_.Clone();
      resultSolids_ = other.resultSolids_.Clone();
      resultSupports_ = other.resultSupports_.Clone();
      resultPanels_ = other.resultPanels_.Clone();
      resultDSCs_ = other.resultDSCs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFECaseProto Clone() {
      return new IC_ResultFECaseProto(this);
    }

    /// <summary>Field number for the "CaseId" field.</summary>
    public const int CaseIdFieldNumber = 1;
    private int caseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CaseId {
      get { return caseId_; }
      set {
        caseId_ = value;
      }
    }

    /// <summary>Field number for the "TimeStep" field.</summary>
    public const int TimeStepFieldNumber = 2;
    private double timeStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeStep {
      get { return timeStep_; }
      set {
        timeStep_ = value;
      }
    }

    /// <summary>Field number for the "ResultBars" field.</summary>
    public const int ResultBarsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEBarProto> _repeated_resultBars_codec
        = pb::FieldCodec.ForMessage(26, global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEBarProto.Parser);
    private readonly pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEBarProto> resultBars_ = new pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEBarProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEBarProto> ResultBars {
      get { return resultBars_; }
    }

    /// <summary>Field number for the "ResultNodes" field.</summary>
    public const int ResultNodesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFENodeProto> _repeated_resultNodes_codec
        = pb::FieldCodec.ForMessage(34, global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFENodeProto.Parser);
    private readonly pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFENodeProto> resultNodes_ = new pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFENodeProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFENodeProto> ResultNodes {
      get { return resultNodes_; }
    }

    /// <summary>Field number for the "ResultSolids" field.</summary>
    public const int ResultSolidsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFESolidProto> _repeated_resultSolids_codec
        = pb::FieldCodec.ForMessage(42, global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFESolidProto.Parser);
    private readonly pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFESolidProto> resultSolids_ = new pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFESolidProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFESolidProto> ResultSolids {
      get { return resultSolids_; }
    }

    /// <summary>Field number for the "ResultSupports" field.</summary>
    public const int ResultSupportsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFESupportProto> _repeated_resultSupports_codec
        = pb::FieldCodec.ForMessage(50, global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFESupportProto.Parser);
    private readonly pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFESupportProto> resultSupports_ = new pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFESupportProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFESupportProto> ResultSupports {
      get { return resultSupports_; }
    }

    /// <summary>Field number for the "ResultPanels" field.</summary>
    public const int ResultPanelsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEPanelProto> _repeated_resultPanels_codec
        = pb::FieldCodec.ForMessage(58, global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEPanelProto.Parser);
    private readonly pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEPanelProto> resultPanels_ = new pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEPanelProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEPanelProto> ResultPanels {
      get { return resultPanels_; }
    }

    /// <summary>Field number for the "ResultDSCs" field.</summary>
    public const int ResultDSCsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEDSCProto> _repeated_resultDSCs_codec
        = pb::FieldCodec.ForMessage(66, global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEDSCProto.Parser);
    private readonly pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEDSCProto> resultDSCs_ = new pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEDSCProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEDSCProto> ResultDSCs {
      get { return resultDSCs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IC_ResultFECaseProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IC_ResultFECaseProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CaseId != other.CaseId) return false;
      if (TimeStep != other.TimeStep) return false;
      if(!resultBars_.Equals(other.resultBars_)) return false;
      if(!resultNodes_.Equals(other.resultNodes_)) return false;
      if(!resultSolids_.Equals(other.resultSolids_)) return false;
      if(!resultSupports_.Equals(other.resultSupports_)) return false;
      if(!resultPanels_.Equals(other.resultPanels_)) return false;
      if(!resultDSCs_.Equals(other.resultDSCs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CaseId != 0) hash ^= CaseId.GetHashCode();
      if (TimeStep != 0D) hash ^= TimeStep.GetHashCode();
      hash ^= resultBars_.GetHashCode();
      hash ^= resultNodes_.GetHashCode();
      hash ^= resultSolids_.GetHashCode();
      hash ^= resultSupports_.GetHashCode();
      hash ^= resultPanels_.GetHashCode();
      hash ^= resultDSCs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CaseId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CaseId);
      }
      if (TimeStep != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TimeStep);
      }
      resultBars_.WriteTo(output, _repeated_resultBars_codec);
      resultNodes_.WriteTo(output, _repeated_resultNodes_codec);
      resultSolids_.WriteTo(output, _repeated_resultSolids_codec);
      resultSupports_.WriteTo(output, _repeated_resultSupports_codec);
      resultPanels_.WriteTo(output, _repeated_resultPanels_codec);
      resultDSCs_.WriteTo(output, _repeated_resultDSCs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CaseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CaseId);
      }
      if (TimeStep != 0D) {
        size += 1 + 8;
      }
      size += resultBars_.CalculateSize(_repeated_resultBars_codec);
      size += resultNodes_.CalculateSize(_repeated_resultNodes_codec);
      size += resultSolids_.CalculateSize(_repeated_resultSolids_codec);
      size += resultSupports_.CalculateSize(_repeated_resultSupports_codec);
      size += resultPanels_.CalculateSize(_repeated_resultPanels_codec);
      size += resultDSCs_.CalculateSize(_repeated_resultDSCs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IC_ResultFECaseProto other) {
      if (other == null) {
        return;
      }
      if (other.CaseId != 0) {
        CaseId = other.CaseId;
      }
      if (other.TimeStep != 0D) {
        TimeStep = other.TimeStep;
      }
      resultBars_.Add(other.resultBars_);
      resultNodes_.Add(other.resultNodes_);
      resultSolids_.Add(other.resultSolids_);
      resultSupports_.Add(other.resultSupports_);
      resultPanels_.Add(other.resultPanels_);
      resultDSCs_.Add(other.resultDSCs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CaseId = input.ReadInt32();
            break;
          }
          case 17: {
            TimeStep = input.ReadDouble();
            break;
          }
          case 26: {
            resultBars_.AddEntriesFrom(input, _repeated_resultBars_codec);
            break;
          }
          case 34: {
            resultNodes_.AddEntriesFrom(input, _repeated_resultNodes_codec);
            break;
          }
          case 42: {
            resultSolids_.AddEntriesFrom(input, _repeated_resultSolids_codec);
            break;
          }
          case 50: {
            resultSupports_.AddEntriesFrom(input, _repeated_resultSupports_codec);
            break;
          }
          case 58: {
            resultPanels_.AddEntriesFrom(input, _repeated_resultPanels_codec);
            break;
          }
          case 66: {
            resultDSCs_.AddEntriesFrom(input, _repeated_resultDSCs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IC_ResultFEProto : pb::IMessage<IC_ResultFEProto> {
    private static readonly pb::MessageParser<IC_ResultFEProto> _parser = new pb::MessageParser<IC_ResultFEProto>(() => new IC_ResultFEProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IC_ResultFEProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.ICResultFEModelReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEProto(IC_ResultFEProto other) : this() {
      nodeSize_ = other.nodeSize_;
      suppSize_ = other.suppSize_;
      barSize_ = other.barSize_;
      panelSize_ = other.panelSize_;
      solidSize_ = other.solidSize_;
      resultElements_ = other.resultElements_.Clone();
      resultNodes_ = other.resultNodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEProto Clone() {
      return new IC_ResultFEProto(this);
    }

    /// <summary>Field number for the "NodeSize" field.</summary>
    public const int NodeSizeFieldNumber = 1;
    private int nodeSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NodeSize {
      get { return nodeSize_; }
      set {
        nodeSize_ = value;
      }
    }

    /// <summary>Field number for the "SuppSize" field.</summary>
    public const int SuppSizeFieldNumber = 2;
    private int suppSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuppSize {
      get { return suppSize_; }
      set {
        suppSize_ = value;
      }
    }

    /// <summary>Field number for the "BarSize" field.</summary>
    public const int BarSizeFieldNumber = 3;
    private int barSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BarSize {
      get { return barSize_; }
      set {
        barSize_ = value;
      }
    }

    /// <summary>Field number for the "PanelSize" field.</summary>
    public const int PanelSizeFieldNumber = 4;
    private int panelSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PanelSize {
      get { return panelSize_; }
      set {
        panelSize_ = value;
      }
    }

    /// <summary>Field number for the "SolidSize" field.</summary>
    public const int SolidSizeFieldNumber = 5;
    private int solidSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SolidSize {
      get { return solidSize_; }
      set {
        solidSize_ = value;
      }
    }

    /// <summary>Field number for the "ResultElements" field.</summary>
    public const int ResultElementsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEElementProto> _repeated_resultElements_codec
        = pb::FieldCodec.ForMessage(50, global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEElementProto.Parser);
    private readonly pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEElementProto> resultElements_ = new pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEElementProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEElementProto> ResultElements {
      get { return resultElements_; }
    }

    /// <summary>Field number for the "ResultNodes" field.</summary>
    public const int ResultNodesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFENodeDescProto> _repeated_resultNodes_codec
        = pb::FieldCodec.ForMessage(58, global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFENodeDescProto.Parser);
    private readonly pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFENodeDescProto> resultNodes_ = new pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFENodeDescProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFENodeDescProto> ResultNodes {
      get { return resultNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IC_ResultFEProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IC_ResultFEProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeSize != other.NodeSize) return false;
      if (SuppSize != other.SuppSize) return false;
      if (BarSize != other.BarSize) return false;
      if (PanelSize != other.PanelSize) return false;
      if (SolidSize != other.SolidSize) return false;
      if(!resultElements_.Equals(other.resultElements_)) return false;
      if(!resultNodes_.Equals(other.resultNodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeSize != 0) hash ^= NodeSize.GetHashCode();
      if (SuppSize != 0) hash ^= SuppSize.GetHashCode();
      if (BarSize != 0) hash ^= BarSize.GetHashCode();
      if (PanelSize != 0) hash ^= PanelSize.GetHashCode();
      if (SolidSize != 0) hash ^= SolidSize.GetHashCode();
      hash ^= resultElements_.GetHashCode();
      hash ^= resultNodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeSize != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NodeSize);
      }
      if (SuppSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SuppSize);
      }
      if (BarSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BarSize);
      }
      if (PanelSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PanelSize);
      }
      if (SolidSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SolidSize);
      }
      resultElements_.WriteTo(output, _repeated_resultElements_codec);
      resultNodes_.WriteTo(output, _repeated_resultNodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeSize);
      }
      if (SuppSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuppSize);
      }
      if (BarSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BarSize);
      }
      if (PanelSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PanelSize);
      }
      if (SolidSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SolidSize);
      }
      size += resultElements_.CalculateSize(_repeated_resultElements_codec);
      size += resultNodes_.CalculateSize(_repeated_resultNodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IC_ResultFEProto other) {
      if (other == null) {
        return;
      }
      if (other.NodeSize != 0) {
        NodeSize = other.NodeSize;
      }
      if (other.SuppSize != 0) {
        SuppSize = other.SuppSize;
      }
      if (other.BarSize != 0) {
        BarSize = other.BarSize;
      }
      if (other.PanelSize != 0) {
        PanelSize = other.PanelSize;
      }
      if (other.SolidSize != 0) {
        SolidSize = other.SolidSize;
      }
      resultElements_.Add(other.resultElements_);
      resultNodes_.Add(other.resultNodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NodeSize = input.ReadInt32();
            break;
          }
          case 16: {
            SuppSize = input.ReadInt32();
            break;
          }
          case 24: {
            BarSize = input.ReadInt32();
            break;
          }
          case 32: {
            PanelSize = input.ReadInt32();
            break;
          }
          case 40: {
            SolidSize = input.ReadInt32();
            break;
          }
          case 50: {
            resultElements_.AddEntriesFrom(input, _repeated_resultElements_codec);
            break;
          }
          case 58: {
            resultNodes_.AddEntriesFrom(input, _repeated_resultNodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IC_ResultFEUtilityProto : pb::IMessage<IC_ResultFEUtilityProto> {
    private static readonly pb::MessageParser<IC_ResultFEUtilityProto> _parser = new pb::MessageParser<IC_ResultFEUtilityProto>(() => new IC_ResultFEUtilityProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IC_ResultFEUtilityProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.ICResultFEModelReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEUtilityProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEUtilityProto(IC_ResultFEUtilityProto other) : this() {
      ResultInfo = other.resultInfo_ != null ? other.ResultInfo.Clone() : null;
      resultCases_ = other.resultCases_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IC_ResultFEUtilityProto Clone() {
      return new IC_ResultFEUtilityProto(this);
    }

    /// <summary>Field number for the "ResultInfo" field.</summary>
    public const int ResultInfoFieldNumber = 1;
    private global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEProto resultInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEProto ResultInfo {
      get { return resultInfo_; }
      set {
        resultInfo_ = value;
      }
    }

    /// <summary>Field number for the "ResultCases" field.</summary>
    public const int ResultCasesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFECaseProto> _repeated_resultCases_codec
        = pb::FieldCodec.ForMessage(18, global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFECaseProto.Parser);
    private readonly pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFECaseProto> resultCases_ = new pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFECaseProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFECaseProto> ResultCases {
      get { return resultCases_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IC_ResultFEUtilityProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IC_ResultFEUtilityProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ResultInfo, other.ResultInfo)) return false;
      if(!resultCases_.Equals(other.resultCases_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultInfo_ != null) hash ^= ResultInfo.GetHashCode();
      hash ^= resultCases_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ResultInfo);
      }
      resultCases_.WriteTo(output, _repeated_resultCases_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResultInfo);
      }
      size += resultCases_.CalculateSize(_repeated_resultCases_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IC_ResultFEUtilityProto other) {
      if (other == null) {
        return;
      }
      if (other.resultInfo_ != null) {
        if (resultInfo_ == null) {
          resultInfo_ = new global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEProto();
        }
        ResultInfo.MergeFrom(other.ResultInfo);
      }
      resultCases_.Add(other.resultCases_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (resultInfo_ == null) {
              resultInfo_ = new global::Module.STRENOOX.CalcFEMRoot.ResultFEModel.IC_ResultFEProto();
            }
            input.ReadMessage(resultInfo_);
            break;
          }
          case 18: {
            resultCases_.AddEntriesFrom(input, _repeated_resultCases_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
